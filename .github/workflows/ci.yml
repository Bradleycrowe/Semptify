name: CI

on:
  push:
    branches: [ main, master ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:

jobs:
  test-and-build:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        python-version: [ '3.12', '3.13' ]
    permissions:
      contents: read
      packages: write
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
        cache: 'pip'
        cache-dependency-path: 'requirements.txt'

    - name: Install dependencies
      run: |
        python -m venv .venv
        . .venv/bin/activate
        pip install -r requirements.txt
        pip install pytest
        pip install ruff
        pip install pre-commit
        echo "Installing hadolint & actionlint binaries" 
        curl -sL https://github.com/hadolint/hadolint/releases/download/v2.12.0/hadolint-Linux-x86_64 -o /usr/local/bin/hadolint && chmod +x /usr/local/bin/hadolint
        curl -sL https://github.com/rhysd/actionlint/releases/download/v1.7.1/actionlint_Linux_x86_64.tar.gz | tar xz -C /usr/local/bin actionlint

    - name: Generate SBOM (source deps) with Syft
      run: |
        curl -sSfL https://raw.githubusercontent.com/anchore/syft/main/install.sh | sh -s -- -b /usr/local/bin v1.19.0
        syft dir:. -o json > sbom-source-${{ matrix.python-version }}.json
        test -s sbom-source-${{ matrix.python-version }}.json
    - name: Upload SBOM (source) artifact
      uses: actions/upload-artifact@v4
      with:
        name: sbom-source-${{ matrix.python-version }}-${{ github.run_id }}
        path: sbom-source-${{ matrix.python-version }}.json

    - name: Lint (ruff)
      run: |
        . .venv/bin/activate
        ruff check . || (echo "Ruff lint failed" && exit 1)

    - name: Lint PowerShell (PSScriptAnalyzer)
      run: |
        pwsh -NoLogo -NoProfile -Command "Install-Module PSScriptAnalyzer -Force -Scope CurrentUser; $errs = Invoke-ScriptAnalyzer -Path . -Recurse -Severity Error,Warning; if($errs){ $errs | Format-Table; Write-Host 'PowerShell lint failed' -ForegroundColor Red; exit 1 } else { Write-Host 'PSScriptAnalyzer passed' -ForegroundColor Green }"

    - name: Lint Shell (ShellCheck)
      run: |
        sudo apt-get update -y
        sudo apt-get install -y shellcheck
        bash scripts/lint.sh

    - name: Pre-commit (ruff + hooks)
      run: |
        . .venv/bin/activate
        pre-commit run --all-files || (echo 'pre-commit hooks failed' && exit 1)

    - name: Run tests
      run: |
        . .venv/bin/activate
        mkdir -p test-results
        python -m pytest -q --junitxml=test-results/junit-${{ matrix.python-version }}.xml
    - name: Upload test results
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: junit-${{ matrix.python-version }}-${{ github.run_id }}
        path: test-results/junit-${{ matrix.python-version }}.xml

    - name: Build Docker image (tests already ran)
      run: |
        docker build -t semptifygui:ci .
  scan-image:
    name: Scan built image with Trivy
    runs-on: ubuntu-latest
    needs: test-and-build
    steps:
    - name: Run Trivy scan
      # Pinned to a specific Trivy action release to avoid implicit changes from @master
      # Update version deliberately when upgrading Trivy
      uses: aquasecurity/trivy-action@0.21.0
      with:
        image-ref: semptifygui:ci
        format: 'sarif'
        output: trivy-report.sarif
        exit-code: '1'
        severity: 'CRITICAL,HIGH'

    - name: Upload Trivy SARIF to GitHub code scanning
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: trivy-report.sarif

    - name: Upload Trivy reports (artifact)
      uses: actions/upload-artifact@v4
      with:
        name: trivy-reports-${{ github.run_id }}
        path: trivy-report.sarif

  publish-image:
    name: Publish image to GHCR
    runs-on: ubuntu-latest
    needs: scan-image
    if: startsWith(github.ref, 'refs/tags/')
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push image to GHCR
        id: build_and_push
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          tags: |
            ghcr.io/${{ github.repository_owner }}/semptifygui:${{ github.ref_name }}
            ghcr.io/${{ github.repository_owner }}/semptifygui:latest

      - name: Save image info artifact
        run: |
          echo "repo=ghcr.io/${{ github.repository_owner }}/semptifygui" > image-info.txt
          echo "tag=${{ github.ref_name }}" >> image-info.txt
          echo "latest=ghcr.io/${{ github.repository_owner }}/semptifygui:latest" >> image-info.txt
          echo "digest=${{ steps.build_and_push.outputs.digest }}" >> image-info.txt
        shell: bash

      - name: Upload image info artifact
        uses: actions/upload-artifact@v4
        with:
          name: image-info-${{ github.ref_name }}
          path: image-info.txt

  generate-sbom:
    name: Generate SBOM for image
    runs-on: ubuntu-latest
    needs: publish-image
    if: startsWith(github.ref, 'refs/tags/')
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Log in to GHCR (for pulling image)
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Pull released image
        run: |
          docker pull ghcr.io/${{ github.repository_owner }}/semptifygui:${{ github.ref_name }}

      - name: Generate SBOM with Syft (pinned)
        run: |
          # Pinned Syft version to ensure reproducible SBOM format; update intentionally
          docker run --rm anchore/syft:1.19.0 ghcr.io/${{ github.repository_owner }}/semptifygui:${{ github.ref_name }} -o json > sbom.json
          test -s sbom.json || (echo "SBOM file empty" && exit 1)

      - name: Upload SBOM artifact
        uses: actions/upload-artifact@v4
        with:
          name: sbom-${{ github.ref_name }}
          path: sbom.json

  integration-test:
    name: Integration test (docker & podman matrix)
    runs-on: ubuntu-latest
    needs: scan-image
    if: github.event_name != 'schedule'
    strategy:
      fail-fast: false
      matrix:
        include:
          - engine: docker
            port: 8081
          - engine: podman
            port: 8082
    steps:
      - name: Install engine (podman)
        if: matrix.engine == 'podman'
        run: |
          sudo apt-get update
          sudo apt-get install -y podman
          podman info | grep -E 'version|graphDriverName' || true
          echo "Podman installed"
      - name: Enable podman layer cache
        if: matrix.engine == 'podman'
        uses: actions/cache@v4
        with:
          path: ~/.local/share/containers/storage
          key: podman-storage-${{ runner.os }}-${{ hashFiles('Dockerfile') }}
          restore-keys: |
            podman-storage-${{ runner.os }}-
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Build image (docker)
        if: matrix.engine == 'docker'
        run: docker build -t semptifygui:integration .
      - name: Build image (podman)
        if: matrix.engine == 'podman'
        run: podman build -t semptifygui:integration .
      - name: Run container
        run: |
          if [ "${{ matrix.engine }}" = docker ]; then \
             docker run -d --name semptify-integration -p 127.0.0.1:${{ matrix.port }}:8080 semptifygui:integration || (docker ps -a && docker logs semptify-integration && false); \
          else \
             podman run -d --name semptify-integration -p 127.0.0.1:${{ matrix.port }}:8080 semptifygui:integration || (podman ps -a && podman logs semptify-integration && false); \
          fi
      - name: Wait for HTTP health (max 30s)
        run: |
          for i in {1..30}; do
            if curl -fsS http://127.0.0.1:${{ matrix.port }}/health; then echo healthy; break; fi
            sleep 1; echo waiting... $i; done
      - name: Smoke checks
        run: |
          curl -fsS http://127.0.0.1:${{ matrix.port }}/ | grep -q "SemptifyGUI is live"
          curl -fsS http://127.0.0.1:${{ matrix.port }}/readyz
      - name: Robot Framework smoke suite
        run: |
          python -m pip install -r requirements-dev.txt
          robot -v BASE_URL:http://127.0.0.1:${{ matrix.port }} robot/smoke.robot
      - name: Trivy scan (podman image parity)
        if: matrix.engine == 'podman'
        uses: aquasecurity/trivy-action@0.21.0
        with:
          image-ref: semptifygui:integration
          format: 'table'
          exit-code: '1'
          severity: 'CRITICAL,HIGH'
      - name: Teardown
        if: always()
        run: |
          if [ "${{ matrix.engine }}" = docker ]; then \
             docker stop semptify-integration || true; docker rm semptify-integration || true; docker rmi semptifygui:integration || true; \
          else \
             podman stop semptify-integration || true; podman rm semptify-integration || true; podman rmi semptifygui:integration || true; \
          fi

  publish-dockerhub:
    name: Publish image to Docker Hub
    runs-on: ubuntu-latest
    needs: publish-image
    if: startsWith(github.ref, 'refs/tags/')
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          registry: docker.io
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push image to Docker Hub
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: |
            docker.io/${{ secrets.DOCKERHUB_USERNAME }}/semptifygui:${{ github.ref_name }}
            docker.io/${{ secrets.DOCKERHUB_USERNAME }}/semptifygui:latest

  create-release:
    name: Create GitHub Release and attach image info
    runs-on: ubuntu-latest
    needs: publish-image
    if: startsWith(github.ref, 'refs/tags/')
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Prepare dynamic release notes
        id: rel_notes
        run: |
          echo 'RELEASE_BODY<<EOF' >> $GITHUB_OUTPUT
          echo "Release ${{ github.ref_name }}" >> $GITHUB_OUTPUT
          echo >> $GITHUB_OUTPUT
          echo '## Changes' >> $GITHUB_OUTPUT
          echo '${{ github.event.head_commit.message }}' >> $GITHUB_OUTPUT
          echo >> $GITHUB_OUTPUT
          if [ -f sbom.json ]; then
            echo '## SBOM Summary (top 10 packages)' >> $GITHUB_OUTPUT
            jq -r '.artifacts[] | select(.name and .version) | "- " + .name + "@" + .version' sbom.json | head -n 10 >> $GITHUB_OUTPUT || true
            echo >> $GITHUB_OUTPUT
          fi
          if [ -f image-info.txt ]; then
            echo '## Image Info' >> $GITHUB_OUTPUT
            cat image-info.txt >> $GITHUB_OUTPUT
            echo >> $GITHUB_OUTPUT
          fi
          echo 'EOF' >> $GITHUB_OUTPUT

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref_name }}
          release_name: ${{ github.ref_name }}
          body: ${{ steps.rel_notes.outputs.RELEASE_BODY }}

      - name: Download image info artifact
        uses: actions/download-artifact@v4
        with:
          name: image-info-${{ github.ref_name }}

      - name: Download SBOM artifact
        uses: actions/download-artifact@v4
        with:
          name: sbom-${{ github.ref_name }}

      - name: Upload Trivy reports (artifact)
        uses: actions/upload-artifact@v4
        with:
          name: trivy-reports-${{ github.run_id }}
          path: trivy-report.sarif

      - name: Upload SBOM artifact
        uses: actions/upload-artifact@v4
        with:
          name: sbom-${{ github.ref_name }}
          path: sbom.json

      - name: Upload image info artifact
        uses: actions/upload-artifact@v4
        with:
          name: image-info-${{ github.ref_name }}
          path: image-info.txt
