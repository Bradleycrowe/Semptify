name: One-and-Done

on:
  workflow_dispatch:
    inputs:
      skip_smoke:
        description: "Skip smoke test even if BASE URL secret is present"
        required: false
        type: boolean
        default: false

concurrency:
  group: oad-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: read

jobs:
  test:
    name: Lint and Test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.13'
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          python -m pip install -r requirements-dev.txt
      - name: Ruff Lint
        run: |
          python -m ruff --version
          python -m ruff check .
      - name: Pytest
        run: |
          python -m pytest -q

  deploy:
    name: Deploy to Render
    runs-on: ubuntu-latest
    needs: [test]
    timeout-minutes: 20
    steps:
      - name: Verify secrets
        run: |
          [ -n "${{ secrets.RENDER_API_KEY }}" ] || { echo 'Missing RENDER_API_KEY'; exit 1; }
          [ -n "${{ secrets.RENDER_SERVICE_ID }}" ] || { echo 'Missing RENDER_SERVICE_ID'; exit 1; }
      - name: Trigger deploy
        id: trigger
        env:
          RENDER_API_KEY: ${{ secrets.RENDER_API_KEY }}
          RENDER_SERVICE_ID: ${{ secrets.RENDER_SERVICE_ID }}
        run: |
          set -euo pipefail
          echo "start_epoch=$(date +%s)" >> $GITHUB_OUTPUT
          resp=$(curl -sS -X POST \
            -H "Authorization: Bearer $RENDER_API_KEY" \
            -H "Accept: application/json" \
            -H "Content-Type: application/json" \
            https://api.render.com/v1/services/$RENDER_SERVICE_ID/deploys \
            -d '{"clearCache":false}')
          echo "$resp" | jq .
          id=$(echo "$resp" | jq -r '.id')
          [ -n "$id" ] && [ "$id" != null ] || { echo 'No deploy id returned'; exit 1; }
          echo "deploy_id=$id" >> $GITHUB_OUTPUT
      - name: Poll status
        id: poll
        env:
          RENDER_API_KEY: ${{ secrets.RENDER_API_KEY }}
        run: |
          set -euo pipefail
          id='${{ steps.trigger.outputs.deploy_id }}'
          echo "Polling deploy $id"
          end=$((SECONDS+900))
          phase="unknown"
          last=""
          phases=""
          invalid_json=0
          while [ $SECONDS -lt $end ]; do
            js=$(curl -sS -H "Authorization: Bearer $RENDER_API_KEY" https://api.render.com/v1/deploys/$id) || { echo 'fetch failed'; sleep 5; continue; }
            if ! echo "$js" | jq -e '.status' >/dev/null 2>&1; then
              echo "Warning: invalid JSON or missing status"
              invalid_json=$((invalid_json+1))
              if [ $invalid_json -gt 3 ]; then
                echo "Too many invalid responses; failing"
                exit 6
              fi
              sleep 5
              continue
            fi
            phase=$(echo "$js" | jq -r '.status')
            echo "Phase: $phase"
            if [ "$phase" != "$last" ]; then
              ts=$(date -u +%Y-%m-%dT%H:%M:%SZ)
              phases+="$ts $phase\n"
              last="$phase"
            fi
            case "$phase" in
              live) echo 'Live'; break ;;
              build_failed|deactivated|canceled|failed) echo "$js"; exit 2 ;;
            esac
            sleep 8
          done
          [ "$phase" = live ] || { echo 'Timed out waiting for live'; exit 3; }
          echo "history<<EOF" >> $GITHUB_OUTPUT
          printf "%s" "$phases" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
          echo "end_epoch=$(date +%s)" >> $GITHUB_OUTPUT
      - name: Smoke (optional)
        if: success() && ( ! inputs.skip_smoke )
        env:
          BASE: ${{ secrets.RENDER_BASE_URL }}
        run: |
          set -e
          if [ -z "$BASE" ]; then echo 'BASE not set; skipping smoke'; exit 0; fi
          curl -fsS "$BASE/health" >/dev/null
          curl -fsS "$BASE/readyz" >/dev/null
          echo 'Smoke OK'
      - name: Prepare phase history artifact
        if: always()
        run: |
          printf "%s" "${{ steps.poll.outputs.history }}" > phase-history.txt || true
          ls -l phase-history.txt || true
      - name: Upload phase history artifact
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: phase-history
          path: phase-history.txt
          if-no-files-found: warn
          retention-days: 7
      - name: Summary
        if: always()
        run: |
          echo "Deploy result: ${{ job.status }}"
          start='${{ steps.trigger.outputs.start_epoch }}'
          end='${{ steps.poll.outputs.end_epoch }}'
          now=$(date +%s)
          if [ -z "$start" ] || ! echo "$start" | grep -Eq '^[0-9]+$'; then start=$now; fi
          if [ -z "$end" ] || ! echo "$end" | grep -Eq '^[0-9]+$'; then end=$now; fi
          duration=$(( end - start ))
          if [ $duration -lt 0 ]; then duration=0; fi
          mins=$(( duration / 60 ))
          secs=$(( duration % 60 ))
          human="${mins}m${secs}s"
          echo "---" >> $GITHUB_STEP_SUMMARY
          echo "## One-and-Done Summary" >> $GITHUB_STEP_SUMMARY
          echo "* Commit: $GITHUB_SHA" >> $GITHUB_STEP_SUMMARY
          echo "* Result: ${{ job.status }}" >> $GITHUB_STEP_SUMMARY
          echo "* Duration: ${duration}s (${human})" >> $GITHUB_STEP_SUMMARY
          echo "* Smoke skipped: ${{ inputs.skip_smoke }}" >> $GITHUB_STEP_SUMMARY
          echo "### Phase History" >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
          echo "${{ steps.poll.outputs.history }}" >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
